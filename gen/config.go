package gen

import (
	"github.com/stephenafamo/bob/gen/drivers"
)

// Config for the running of the commands
type Config[ConstraintExtra any] struct {
	// System to use to create null and optional types
	// available options are:
	// - "github.com/aarondl/opt" (default)
	//    * Uses null.Val[T] for optional values
	//    * Uses null.Null[T] for nullable values
	// - "database/sql"
	//    * Uses pointers for optional values
	//	  * Uses sql.Null[T] for nullable values
	TypeSystem string `yaml:"type_system"`
	// Struct tags to generate
	Tags []string `yaml:"tags"`
	// Disable generating go test files
	NoTests bool `yaml:"no_tests"`
	// Disable back referencing in the loaded relationship structs
	NoBackReferencing bool `yaml:"no_back_referencing"`
	// Decides the casing for go structure tag names. camel, title or snake (default snake)
	StructTagCasing string `yaml:"struct_tag_casing"`
	// Relationship struct tag name
	RelationTag string `yaml:"relation_tag"`
	// List of column names that should have tags values set to '-' (ignored during parsing)
	TagIgnore []string `yaml:"tag_ignore"`

	Types         map[string]drivers.Type      `yaml:"types"`         // register custom types
	Aliases       drivers.Aliases              `yaml:"aliases"`       // customize aliases
	Constraints   Constraints[ConstraintExtra] `yaml:"constraints"`   // define additional constraints
	Relationships Relationships                `yaml:"relationships"` // define additional relationships

	Replacements []Replace   `yaml:"replacements"`
	Inflections  Inflections `yaml:"inflections"`

	// Customize the generator name in the top level comment of generated files
	// >>   Code generated by **GENERATOR NAME**. DO NOT EDIT.
	// defaults to "BobGen [driver] [version]"
	Generator string `yaml:"generator"`
}

// Replace replaces a column type with something else
type Replace struct {
	Tables  []string     `yaml:"tables"`
	Match   ColumnFilter `yaml:"match"`
	Replace string       `yaml:"replace"`
}

// ColumnFilter is used to filter columns in the config file.
// It should mirror the fields of drivers.Column
type ColumnFilter struct {
	Name      *string `yaml:"name"`
	DBType    *string `yaml:"db_type"`
	Type      *string `yaml:"type"`
	Default   *string `yaml:"default"`
	Comment   *string `yaml:"comment"`
	Nullable  *bool   `yaml:"nullable"`
	Generated *bool   `yaml:"generated"`
	AutoIncr  *bool   `yaml:"autoincr"`

	// DomainName is the domain type name associated to the column. See here:
	// https://www.postgresql.org/docs/16/extend-type-system.html
	DomainName *string `yaml:"domain_name"`
}

func (f ColumnFilter) IsEmpty() bool {
	return f.Name == nil &&
		f.DBType == nil &&
		f.Type == nil &&
		f.Default == nil &&
		f.Comment == nil &&
		f.Nullable == nil &&
		f.Generated == nil &&
		f.AutoIncr == nil &&
		f.DomainName == nil
}

// Matches determines if a drivers.Column matches all the specified criteria (logical AND).
//
// String fields are matched case-insensitively and by regex.
func (f ColumnFilter) Matches(column drivers.Column) bool {
	// empty filters should not match anything
	if f.IsEmpty() {
		return false
	}

	if val := f.Name; val != nil && !matchString(*val, column.Name) {
		return false
	}

	if val := f.DBType; val != nil && !matchString(*val, column.DBType) {
		return false
	}

	if val := f.Type; val != nil && !matchString(*val, column.Type) {
		return false
	}

	if val := f.Default; val != nil && !matchString(*val, column.Default) {
		return false
	}

	if val := f.Comment; val != nil && !matchString(*val, column.Comment) {
		return false
	}

	if val := f.DomainName; val != nil && !matchString(*val, column.DomainName) {
		return false
	}

	if val := f.Nullable; val != nil && *val != column.Nullable {
		return false
	}

	if val := f.Generated; val != nil && *val != column.Generated {
		return false
	}

	if val := f.AutoIncr; val != nil && *val != column.AutoIncr {
		return false
	}

	// all specified conditions matched
	return true
}

type Inflections struct {
	Plural        map[string]string `yaml:"plural"`
	PluralExact   map[string]string `yaml:"plural_exact"`
	Singular      map[string]string `yaml:"singular"`
	SingularExact map[string]string `yaml:"singular_exact"`
	Irregular     map[string]string `yaml:"irregular"`
}
